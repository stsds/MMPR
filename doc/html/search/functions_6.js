var searchData=
[
  ['fillsquaretriangle_444',['FillSquareTriangle',['../classMPCRTile.html#ac8fbc7499da753101bdb4db0de418e45',1,'MPCRTile::FillSquareTriangle(const double &amp;aValue, const bool &amp;aUpperTriangle=true, const mpcr::precision::Precision &amp;aPrecision=mpcr::precision::FLOAT)'],['../classMPCRTile.html#a1ec6ba04a475bad2dcf63b3cf6db95a6',1,'MPCRTile::FillSquareTriangle(const double &amp;aValue, const bool &amp;aUpperTriangle, const std::string &amp;aPrecision)']]],
  ['filltriangle_445',['FillTriangle',['../classDataType.html#acfb34852b706a2499a92cf8636b9fd36',1,'DataType']]],
  ['fillwithzeros_446',['FillWithZeros',['../classMPCRTile.html#a2124c8baa0b238e49e772a8a05628271',1,'MPCRTile']]],
  ['floating_5fpoint_5finst_447',['FLOATING_POINT_INST',['../LinearAlgebra_8cpp.html#a233966d30e473fc4d956b5ed0f72a356',1,'FLOATING_POINT_INST(void, linear::CrossProduct, DataType &amp;aInputA, DataType &amp;aInputB, DataType &amp;aOutput, const bool &amp;aTransposeA, const bool &amp;aTransposeB, const bool &amp;aSymmetrize, const double &amp;aAlpha, const double &amp;aBeta) FLOATING_POINT_INST(void:&#160;LinearAlgebra.cpp'],['../LinearAlgebra_8cpp.html#af8a373af4919e5a22c63710ede8827f9',1,'FLOATING_POINT_INST(void, linear::CholeskyInv, DataType &amp;aInputA, DataType &amp;aOutput, const size_t &amp;aNCol) FLOATING_POINT_INST(void:&#160;LinearAlgebra.cpp'],['../LinearAlgebra_8cpp.html#acb68b3a8250481948380224afd8733c6',1,'FLOATING_POINT_INST(void, linear::BackSolve, DataType &amp;aInputA, DataType &amp;aInputB, DataType &amp;aOutput, const size_t &amp;aCol, const bool &amp;aUpperTri, const bool &amp;aTranspose, const char &amp;aSide, const double &amp;aAlpha) FLOATING_POINT_INST(void:&#160;LinearAlgebra.cpp'],['../LinearAlgebra_8cpp.html#ac89c8eb83e8237f999c4daad79e1fa96',1,'FLOATING_POINT_INST(void, linear::Norm, DataType &amp;aInput, const std::string &amp;aType, DataType &amp;aOutput) FLOATING_POINT_INST(void:&#160;LinearAlgebra.cpp'],['../LinearAlgebra_8cpp.html#a634f68b9fd201c5188d70e1e1fad3363',1,'FLOATING_POINT_INST(void, linear::SVD, DataType &amp;aInputA, DataType &amp;aOutputS, DataType &amp;aOutputU, DataType &amp;aOutputV, const size_t &amp;aNu, const size_t &amp;aNv, const bool &amp;aTranspose) FLOATING_POINT_INST(void:&#160;LinearAlgebra.cpp'],['../LinearAlgebra_8cpp.html#ac066795c7d91c3366371442f655eb7fe',1,'FLOATING_POINT_INST(void, linear::QRDecomposition, DataType &amp;aInputA, DataType &amp;aOutputQr, DataType &amp;aOutputQraux, DataType &amp;aOutputPivot, DataType &amp;aRank, const double &amp;aTolerance) FLOATING_POINT_INST(void:&#160;LinearAlgebra.cpp']]]
];
